@inject ITransactionService TransactionService

<tr style="@StyleByStatus(TransactionModel.Status)">
    <td>@TransactionModel.CreatedOn</td>
    <AuthorizeView Roles="Admin">
        <td>@TransactionModel.UserId</td>
    </AuthorizeView>
    <td>@TransactionModel.Amount @TransactionModel.CurrencyId</td>
    <td>@TransactionModel.Status</td>
    <td>
        @if (TransactionModel.Status is DepositStatus.Undecided)
        {
            <AuthorizeView Roles="Admin">
                <button class="btn btn-success" @onclick="() => ChangeTransactionStatus(TransactionModel.Id, DepositStatus.Approved)">Approve</button>
                <button class="btn btn-danger" @onclick="() => ChangeTransactionStatus(TransactionModel.Id, DepositStatus.Declined)">Decline</button>
            </AuthorizeView>
            <AuthorizeView Roles="User">
                <button class="btn btn-danger" @onclick="() => ChangeTransactionStatus(TransactionModel.Id, DepositStatus.Canceled)">Cancel</button>
            </AuthorizeView>
            @statusChangeResult
        }
    </td>
</tr>


@code {
    [Parameter] public Deposit TransactionModel { get; set; }

    private string statusChangeResult = "";

    private string StyleByStatus(DepositStatus status) => status switch
    {
        DepositStatus.Canceled => "background:coral",
        DepositStatus.Approved => "background:lightgreen",
        DepositStatus.Undecided => "background:lightgray",
        DepositStatus.Declined => "background:red"
    };

    private void ChangeTransactionStatus(int transactionId, DepositStatus targetStatus)
    {
        var (Result, Message) = TransactionService.DecideTransactionStatus(transactionId, targetStatus);
        if (Result is not ServiceResult.Success)
            statusChangeResult = Message;
        else
        {
            TransactionModel.Status = targetStatus;
            statusChangeResult = "";
        }
    }
}
