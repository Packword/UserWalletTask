@inject ITransactionService TransactionService
@inject ICurrencyService CurrencyService

@if (transactions is null)
{
    <h4>Loading...</h4>
}
else
{
    <div class="transaction-filtration">
        <select @bind="@chosenStatuses" multiple>
            @foreach(var status in Enum.GetValues(typeof(DepositStatus)))
            {
                <option value="@status">@status.ToString()</option>
            }
        </select>
        @if (CurrenciesId is null || CurrenciesId.Count() != 1)
        {
            <select @bind="@chosenCurrencies" multiple>
                @foreach (string currency in (CurrenciesId ?? CurrencyService.GetCurrencies().Select(c => c.Id)))
                {
                    <option value="@currency">@currency</option>
                }
            </select>
        }
        @if(UsersId is null || UsersId.Count() != 1)
        {
            <AuthorizeView Roles="Admin">
                <input type="number" class="form-control w-25" placeholder="UserId..." min="0" @bind-value="@chosenUserId"/>
            </AuthorizeView>
        }
            <button class="btn btn-primary" @onclick="FilterTransactions">Search</button>
    </div>
    <TransactionsList>
        @foreach (var transaction in transactions)
        {
            <Transaction TransactionModel="@transaction"></Transaction>
        }
    </TransactionsList>
}


@code {
    [Parameter] public IEnumerable<int>? UsersId { get; set; } = null;
    [Parameter] public IEnumerable<string>? CurrenciesId { get; set; } = null;

    private int? chosenUserId;
    private DepositStatus[] chosenStatuses = Array.Empty<DepositStatus>();
    private string[] chosenCurrencies = Array.Empty<string>();
    private List<Deposit>? transactions;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        FilterTransactions();
    }

    private void FilterTransactions()
    {
        transactions = TransactionService.GetDepositsWithFiltration(chosenUserId.HasValue ? new int[] { chosenUserId.Value } : UsersId,
                                                                    chosenCurrencies.Length != 0 ? chosenCurrencies : CurrenciesId,
                                                                    chosenStatuses.Length != 0 ? chosenStatuses : null, 
                                                                    true);
    }
}
