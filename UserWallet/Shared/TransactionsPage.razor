@inject ITransactionService TransactionService

@if (transactions is null)
{
    <h4>Loading...</h4>
}
else
{
    <div class="transaction-filtration">
        <select @bind="@chosenStatuses" multiple>
            @foreach(DepositStatus status in statuses)
            {
                <option value="@status" @key="@status">@status.ToString()</option>
            }
        </select>
        @if (!IsCurrencyTransactions)
        {
            @if (CurrenciesId is not null)
            {
                <select @bind="@chosenCurrencies" multiple>
                    @foreach (string currency in CurrenciesId)
                    {
                        <option value="@currency" @key="@currency">@currency</option>
                    }
                </select>
            }
            <AuthorizeView Roles="Admin">
                <input type="number" class="form-control w-25" placeholder="UserId..." min="0" @bind-value="@chosenUserId"/>
            </AuthorizeView>
            <button class="btn btn-primary" @onclick="FilterTransactions">Search</button>
        }
    </div>
    <TransactionsList>
        @if (currentTransactions is not null)
        {
            @foreach (var transaction in currentTransactions)
            {
                <Transaction TransactionModel="@transaction"></Transaction>
            }
        }
    </TransactionsList>
}


@code {
    [Parameter] public IEnumerable<int>? UsersId { get; set; }
    [Parameter] public IEnumerable<string>? CurrenciesId { get; set; }
    [Parameter] public bool IsCurrencyTransactions { get; set; }

    private int? chosenUserId;
    private Array statuses = Enum.GetValues(typeof(DepositStatus));
    private DepositStatus[] chosenStatuses = new DepositStatus[] { };
    private string[] chosenCurrencies = new string[] { };
    private List<Deposit>? transactions;
    private List<Deposit>? currentTransactions;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        transactions = TransactionService.GetDepositsWithFiltration(UsersId, CurrenciesId, null, true);
        currentTransactions = transactions?.Select(t => t).ToList();
    }

    private void FilterTransactions()
    {
        currentTransactions = transactions?.Select(t => t).ToList();

        if (chosenCurrencies.Count() != 0)
            currentTransactions = currentTransactions?.Where(t => chosenCurrencies.Contains(t.CurrencyId)).ToList();
        if (chosenStatuses.Count() != 0)
            currentTransactions = currentTransactions?.Where(t => chosenStatuses.Contains(t.Status)).ToList();
        if (chosenUserId is not null)
            currentTransactions = currentTransactions?.Where(t => t.UserId == chosenUserId).ToList();
    }

}
