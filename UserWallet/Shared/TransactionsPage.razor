@inject ITransactionService TransactionService

@if (transactions is null)
{
    <h4>Loading...</h4>
}
else
{
    <div class="transaction-filtration">
        <table class="filter-block">
            @foreach(DepositStatus status in statuses)
            {
                <tr>
                    <th>@status.ToString()</th>
                    <th><input type="checkbox" @onchange="eventArgs => HandleStatusFiltrationChanged(status, eventArgs.Value)"/> </th>
                </tr>
            }
        </table>
        @if (!IsCurrencyTransactions)
        {
            @if (CurrenciesId is not null)
            {
                <table class="filter-block">
                    @foreach (string currency in CurrenciesId)
                    {
                        <tr>
                            <th>@currency</th>
                            <th><input type="checkbox" @onchange="eventArgs => HandleCurrencyFiltrationChanged(currency, eventArgs.Value)" /> </th>
                        </tr>
                    }
                </table>
            }
            @if (IsFilteredByUser)
            {
                <AuthorizeView Roles="@UsersRole.ADMIN">
                    <input type="number" class="form-control w-25" placeholder="UserId..." min="0" @bind-value="@choosenUserId"/>
                    <button class="btn btn-primary" @onclick="FilterTransactions">Search</button>
                </AuthorizeView>
            }
        }
    </div>
    <TransactionsList>
        @if (currentTransactions is not null)
        {
            @foreach (var transaction in currentTransactions)
            {
                <Transaction TransactionModel="@transaction"></Transaction>
            }
        }
    </TransactionsList>
}


@code {
    [Parameter] public IEnumerable<int>? UsersId { get; set; }
    [Parameter] public IEnumerable<string>? CurrenciesId { get; set; }
    [Parameter] public bool IsCurrencyTransactions { get; set; }
    [Parameter] public bool IsFilteredByUser { get; set; }

    private int? choosenUserId;
    private Array statuses = Enum.GetValues(typeof(DepositStatus));
    private HashSet<DepositStatus> choosenStatuses = new();
    private HashSet<string> choosenCurrencies = new();
    private List<Deposit>? transactions;
    private List<Deposit>? currentTransactions;
    protected override void OnInitialized()
    {
        base.OnInitialized();

        transactions = TransactionService.GetDepositsWithFiltration(UsersId, CurrenciesId, null, true);
        currentTransactions = transactions?.Select(t => t).ToList();
    }

    private void HandleCurrencyFiltrationChanged(string currencyId, object checkedValue)
    {
        if ((bool)checkedValue)
        {
            if (!choosenCurrencies.Contains(currencyId))
                choosenCurrencies.Add(currencyId);
        }
        else
        {
            if (choosenCurrencies.Contains(currencyId))
                choosenCurrencies.Remove(currencyId);
        }
        FilterTransactions();
    }

    private void HandleStatusFiltrationChanged(DepositStatus status, object checkedValue)
    {
        if((bool)checkedValue)
        {
            if (!choosenStatuses.Contains(status))
                choosenStatuses.Add(status);
        }
        else
        {
            if (choosenStatuses.Contains(status))
                choosenStatuses.Remove(status);
        }
        FilterTransactions();
    }

    private void FilterTransactions()
    {
        int choosenCurrenciesCount = choosenCurrencies.Count();
        int choosenStatusesCount = choosenStatuses.Count();
        currentTransactions = transactions?.Select(t => t).ToList();
        if (choosenCurrenciesCount != 0 || choosenStatusesCount != 0 || choosenUserId is not null)
        {
            if (choosenCurrenciesCount != 0)
                currentTransactions = currentTransactions?.Where(t => choosenCurrencies.Contains(t.CurrencyId)).ToList();
            if (choosenStatusesCount != 0)
                currentTransactions = currentTransactions?.Where(t => choosenStatuses.Contains(t.Status)).ToList();
            if (choosenUserId is not null)
                currentTransactions = currentTransactions?.Where(t => t.UserId == choosenUserId).ToList();
        }

    }
}
